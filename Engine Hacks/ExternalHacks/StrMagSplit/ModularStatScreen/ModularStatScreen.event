#ifndef MODULAR_STAT_SCREEN
#define MODULAR_STAT_SCREEN

// Modular Stat Screen.
// hack by circleseverywhere

// Skill System Stat Screen by circleseverywhere with additions by Tequila, and probably more people too

#ifdef _FE8_

  // Move "Equipment" tiles so I can fit the full menu tiles
  PUSH
    ORG 0x88668
    WORD 0x6004400
  POP

  ALIGN 4
  MSS_leftstatscreen:
    #incbin "asm/mss_leftstatscreen.dmp"
    POIN HP_Name_Color

  PUSH
      ORG $86E44
        jumpToHack(MSS_leftstatscreen);
  POP

  #define Skl_Arrow_X 0x78
  #define Skl_Arrow_Y 0x38
  #define Spd_Arrow_X 0x78
  #define Spd_Arrow_Y 0x48
  #define Trv_Icon_X 0xB8
  #define Trv_Icon_Y 0x2E
  
  #include "DisplayGrowthsOptions/DisplayGrowthsOptions.event"
 
  PUSH
    #ifdef ENABLE_PERSONAL_INFO
	
      ORG 0x205b24 //24 for stat screen
        POIN MSS_page1|1 MSS_page2|1 MSS_page3|1 MSS_page4|1

      ORG $88690
        BYTE 4 //make 4 pages

	#else // ENABLE_PERSONAL_INFO
	
	  ORG 0x205b24 //24 for stat screen
        POIN MSS_page1|1 MSS_page2|1 MSS_page3|1

      ORG $88690
        BYTE 3 //make 3 pages
	
	#endif // ENABLE_PERSONAL_INFO
	
	ORG 0x889F8
	SHORT 0x0EB8
	
	ORG 0x9269C
	BYTE 0x1E	
	
	ORG 0x926C6
	BYTE 0x24
	
	ORG 0x926F0
	BYTE 0x2A
	
	ORG 0x92714
	BYTE 0x30
	
	ORG 0x9273E
	BYTE 0x36
	
	ORG 0xA00EC0
	BYTE $D4 $0E $A0 $08 $00 $00 $00 $00
	
	ORG 0xA00EE0
	BYTE $00 $00 $00 $00
	
  /*
    ORG $88650
      POIN NewPageNameGraphic
      */

    ORG $87f38
      POIN NewPageNameLayout

    ORG $87f3c
      POIN NewPageNameTiles

    ORG $87f40
      POIN NewPageNamePalette

    ORG $889d0
      SHORT $e010 //Temporary r-text fix to prevent freezing

    // Make all the arrows line up with the stats and stuff

    ORG $883C0
      BYTE Skl_Arrow_X 0x20 Skl_Arrow_Y
 
    ORG $883CA
      BYTE Spd_Arrow_X 0x20 Spd_Arrow_Y

    ORG $883F6
      BYTE Trv_Icon_X 0x21 Trv_Icon_Y

    ORG $883B4
      jumpToHack(Rescue_Arrows)

	ORG 0x87B72
	SHORT 0 0
	ORG 0x87BE8
	SHORT 0 0 //Remove alpha blending for bg1 
	//ORG 0x4E0F6
	//SHORT 0 0 //Lmao the game was loading leftover fe6 graphics 
  
    // Display growths hack

    #ifdef Display_Growths_Toggle
      ORG $8888C
        BYTE 0x82
    #endif
  
    ORG $88896
      SHORT 0x46C0
      jumpToHack(Button_Branch)
  
    // Remember whether we were looking at growths or stats

    ORG $8895C //Loads byte to store 1 before stat screen struct
      callHack_r1(Load_Page)

    ORG $888BC //Stores byte to store 1 before stat screen struct
      callHack_r3(Store_Page)

    // Display an R-button text about pressing Select, since I can't seem to fit it nicely, and make that the default

    ORG $889D8
      POIN PersonalDataRText

    // HP name color

    ORG $86ED4
      callHack_r3(HP_Name_Color)
	  
	#ifdef ENABLE_PERSONAL_INFO
	
      ORG $889f2  
        SHORT $BD30
        BL(RText_Page4_ladder) //this has to be in bl range somewhere
		
	  ORG $087184
	
        RText_Page4_ladder:
          // page 4 helptext hook
          #incbin "asm/rtext_page4.dmp"
          POIN RText_Page4	
		  
      ORG $88690
        jumpToHack(PageNumberCheck)	  
	
	#endif // ENABLE_PERSONAL_INFO
	  
	ORG $2BA28
  jumpToHack(Write_Growths_To_Battle_Struct)

  ORG $2B9C4
  jumpToHack(Enemy_Autolevel)

  ORG $17E98
  callHack_r3(New_Unit_Exp)
  SHORT 0xE005  

  POP
  
	ALIGN 4
	MSS_page1:
	#ifdef LEADERSHIP_STARS
		#incbin "asm/mss_page1_skills_leadership.dmp"
	#else
		#incbin "asm/mss_page1_skills.dmp"
	#endif
	POIN SkillIcons
	POIN Skill_Getter
	POIN SkillTester
	WORD SaviorID
	WORD CelerityID
	WORD SS_SkillsText
	WORD SS_TalkText
	WORD Growth_Options
	POIN Growth_Getter_Table
	POIN Get_Palette_Index
	#ifdef LEADERSHIP_STARS
		POIN GetLeadershipStarCount
	#endif
	POIN MagClassTable
  
  ALIGN 4
  MSS_page2:
    #incbin "asm/mss_page2_original.dmp"

  ALIGN 4
  MSS_page3:
    #incbin "asm/mss_page3_newranks.dmp"
	
  #ifdef ENABLE_PERSONAL_INFO
  
	ALIGN 4
	MESSAGE page 4 at currentOffset
	MSS_page4:
      #incbin "asm/mss_page4_runa.dmp"
	  MESSAGE page 4 ends at currentOffset
	  POIN PersonalDataTable
	  
	ALIGN 4
    PageNumberCheck:
      #include "asm/mss_threepageconditional.lyn.event"
	  POIN PersonalDataTable
	  
  #endif // ENABLE_PERSONAL_INFO

  ALIGN 4
  NewPageNameGraphic:
    //#incext Png2Dmp "asm/pagenamegraphic.png" --lz77
    #incbin "asm/pagenamegraphic.dmp"

  ALIGN 4
  NewPageNameLayout:
    POIN $a008bc $a008d0 $a008de $a008bc
  NewPageNameTiles:
    SHORT 0 $40 $e $80

  ALIGN 4
  NewPageNamePalette:
    #incbin "asm/palettecycler.dmp"

  ALIGN 4
  Button_Branch:
    #incbin "asm/ButtonBranch.dmp"

  ALIGN 4
  Load_Page:
    #incbin "asm/LoadPage.dmp"
    WORD Stat_Page_Ram_Loc

  ALIGN 4
  Store_Page:
    #incbin "asm/StorePage.dmp"
    WORD Stat_Page_Ram_Loc

  ALIGN 4
  Rescue_Arrows:
    #incbin "asm/CheckRescueArrows.dmp"
    POIN SkillTester
    WORD SaviorID

  ALIGN 4
  Get_Palette_Index:
    #incbin "asm/Get_Palette_Index.dmp"
    POIN Growth_Color_Table

  ALIGN 4
  HP_Name_Color:
    #incbin "asm/HPNameColor.dmp"
    POIN New_Palettes
    WORD Growth_Options
    POIN Get_Hp_Growth
    POIN Get_Palette_Index
  
  	ALIGN 4
	Write_Growths_To_Battle_Struct:
	#incbin "asm/Write_Growths_To_Battle_Struct.dmp"
	POIN Class_Level_Cap_Table Get_Hp_Growth Get_Str_Growth Get_Skl_Growth Get_Spd_Growth Get_Def_Growth Get_Res_Growth Get_Mag_Growth Get_Luk_Growth
	WORD Growth_Options

/*
  This has been moved to a CSV
  ALIGN 4
  Class_Level_Cap_Table:
  #incbin "Display Growths Options/Class_Level_Cap_Table.dmp"
*/

	ALIGN 4
	Enemy_Autolevel:
	#incbin "asm/Enemy_Autolevel.dmp"
	WORD Growth_Options
	
	ALIGN 4
	New_Unit_Exp:
	#incbin "asm/New_Unit_Exp.dmp"
	POIN Class_Level_Cap_Table
	
  ALIGN 4
  Growth_Color_Table:
    #include "DisplayGrowthsOptions/GrowthColorsTable.event"

  ALIGN 4
  New_Palettes:
    #include "DisplayGrowthsOptions/NewPalette.event"

  /*

  stat screen R menu is at 8a00b38
  find by breaking on key press while R menu open

  Each entry is 6 words
  Pointer 1 (up)
  POinter 2 (down)
  POinter 3 (left)
  Pointer 4 (right)
  x,y,Txtid
  Zero
  (Optional Pointer for alternate text routine)

  ST_Name:
  WORD 0
  POIN ST_Class
  WORD 0
  POIN ST_Luck
  BYTE 0x18
  BYTE 0x50
  SHORT 0
  WORD 0

  */

  //#include "EAstdlib.event"

  #define RMenu(up,down,left,right,xcoord,ycoord,TID) "POIN up down left right;BYTE xcoord ycoord; SHORT TID; WORD 0 0;"
  #define RMenu(up,down,left,right,xcoord,ycoord,TID,Getter) "POIN up down left right; BYTE xcoord ycoord; SHORT TID; POIN 0 Getter|1"
  #define RMenu(up,down,left,right,xcoord,ycoord,SlotID,Looper,Getter) "POIN up down left right; BYTE xcoord ycoord; SHORT SlotID; POIN Looper|1 Getter|1"

  #define NameDescGetter 0x88bd5
  #define ClassDescGetter 0x88c01
  #define ConditionGetter 0x88a2d

PUSH // R menu
ORG 0xa00b38
ST_Name:
  RMenu(0,ST_Class,0,ST_Luck,0x18,0x50,0x0,NameDescGetter)
ST_Class:
  RMenu(ST_Name,ST_Level,0,ST_Def,0x6,0x68,0x6E8,ClassDescGetter)
ST_Level:
  RMenu(ST_Class,ST_HP,0,ST_Exp,0x6,0x78,0x542)
ST_Exp:
  RMenu(ST_Class,ST_HP,ST_Level,ST_Res,0x26,0x78,0x543)
ST_HP:
  RMenu(ST_Level,0,0,ST_Mov,0x6,0x88,0x544)

ST_Str:
  RMenu(PersonalDataRText,ST_Mag,ST_Name,ST_Con,0x66,0x18,0x546)
ST_Mag:
  RMenu(ST_Str,ST_Skl,ST_Name,ST_Aid,0x66,0x28,0x547)
ST_Skl:
  RMenu(ST_Mag,ST_Spd,ST_Name,ST_Cond,0x66,0x38,0x548)
ST_Spd:
  RMenu(ST_Skl,ST_Luck,ST_Name,ST_Affin,0x66,0x48,0x549)
ST_Luck:
  RMenu(ST_Spd,ST_Def,ST_Name,ST_Talk,0x66,0x58,0x54a)
ST_Def:
  RMenu(ST_Luck,ST_Res,ST_Class,ST_Skills,0x66,0x68,0x54b)
ST_Res:
  RMenu(ST_Def,ST_Mov,ST_Exp,ST_Skill1,0x66,0x78,0x54c)
ST_Mov:
  RMenu(ST_Res,ST_Con,ST_Exp,ST_Skill1,0x66,0x88,0x54d)
POP

//the rest of these are here because space
ALIGN 4

ST_Con:
  RMenu(PersonalDataRText,ST_Aid,ST_Str,0,0xA6,0x18,0x54e)
ST_Aid:
  RMenu(ST_Con,ST_Cond,ST_Mag,0,0xa6,0x28,0x54F)
ST_Cond:
  RMenu(ST_Aid,ST_Affin,ST_Skl,0,0xa6,0x38,0x552,ConditionGetter)
ST_Affin:
  #ifdef LEADERSHIP_STARS
    RMenu(ST_Cond,ST_Talk,ST_Spd,0,0xa6,0x48,LeadRText)
  #else
    RMenu(ST_Cond,ST_Talk,ST_Spd,0,0xa6,0x48,0x551)
  #endif
//ST_Cond:
  //RMenu(ST_Affin,ST_Talk,ST_Spd,0,0xA6,0x48,0x552,ConditionGetter)
ST_Talk:
  RMenu(ST_Affin,ST_Skills,ST_Luck,0,0xA6,0x58,SS_TalkRText)
ST_Skills:
  RMenu(ST_Talk,ST_Skill1,ST_Def,0,0xb6,0x68,SS_SkillsRText)
ST_Skill1:
  RMenu(ST_Skills,ST_Skill4,ST_Res,ST_Skill2,0xa6,0x78,0,RTextLoop,SkillDescGetter)
ST_Skill2:
  RMenu(ST_Skills,ST_Skill5,ST_Skill1,ST_Skill3,0xbe,0x78,1,RTextLoop,SkillDescGetter+4)
ST_Skill3:
  RMenu(ST_Skills,ST_Skill6,ST_Skill2,0,0xd6,0x78,2,RTextLoop,SkillDescGetter+8)
ST_Skill4:
  RMenu(ST_Skill1,0,ST_Mov,ST_Skill5,0xa6,0x88,3,RTextLoop,SkillDescGetter+12)
ST_Skill5:
  RMenu(ST_Skill2,0,ST_Skill4,ST_Skill6,0xbe,0x88,4,RTextLoop,SkillDescGetter+16)
ST_Skill6:
  RMenu(ST_Skill3,0,ST_Skill5,0,0xd6,0x88,5,RTextLoop,SkillDescGetter+20)
#ifdef Display_Growths_Toggle
  PersonalDataRText:
  RMenu(0,ST_Str,0,0,0x76,0x4,PersonalDataDesc1)
#else
  PersonalDataRText:
  RMenu(0,ST_Str,0,0,0x76,0x4,PersonalDataDesc2)
#endif

PUSH // R menu
ORG 0xA00EB8
ST_Name3:
  RMenu(0,ST_Class3,0,0,0x18,0x50,0x0,NameDescGetter)
ST_Class3:
  RMenu(ST_Name3,ST_Level3,0,0,0x6,0x68,0x6E8,ClassDescGetter)
ST_Level3:
  RMenu(ST_Class3,ST_HP3,0,ST_Exp3,0x6,0x78,0x542)
ST_Exp3:
  RMenu(ST_Class3,ST_HP3,ST_Level3,0,0x26,0x78,0x543)
ST_HP3:
  RMenu(ST_Level3,0,0,0,0x6,0x88,0x544)
POP

ALIGN 4
#ifdef ENABLE_PERSONAL_INFO

  RText_Page4:
  
  ST_Name4:
    RMenu(0,ST_Class4,0,ST_Dislikes,0x18,0x50,0x0,NameDescGetter)

  ST_Class4:
    RMenu(ST_Name4,ST_Level4,0,ST_Age,0x6,0x68,0x6E8,ClassDescGetter)

  ST_Level4:
    RMenu(ST_Class4,ST_HP4,0,ST_Exp4,0x6,0x78,0x542)

  ST_Exp4:
    RMenu(ST_Class4,ST_HP4,ST_Level4,ST_Age,0x26,0x78,0x543)

  ST_HP4:
    RMenu(ST_Level4,0,0,ST_Age,0x6,0x88,0x544)

  ST_Likes:
    RMenu(0,ST_Dislikes,ST_Name4,ST_Height,0x66,0x18,LikesDesc)
	
  ST_Dislikes:
    RMenu(ST_Likes,ST_Age,ST_Name4,ST_Height,0x66,0x38,DislikesDesc)
	
  ST_Age:
    RMenu(ST_Dislikes,0,ST_Class4,ST_Height,0x66,0x58,AgeDesc)
	
  ST_Height:
    RMenu(ST_Dislikes,0,ST_Age,0,0xa6,0x58,HeightDesc)
	
#endif // ENABLE_PERSONAL_INFO

//Remove glowy spinny circle thingy from stat screen

PUSH
ORG $88620
POIN RemoveGlowy
POP

ALIGN 4
RemoveGlowy:
//#incext Png2Dmp "RemoveGlowy.png" --lz77
#incbin "RemoveGlowy.dmp"

// POP
#else // _FE8_
  ERROR Modular Stat Screen hack is for FE8
#endif // _FE8_

#endif // MODULAR_STAT_SCREEN
